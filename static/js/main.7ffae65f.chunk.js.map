{"version":3,"sources":["components/StarRating.js","components/ColorPanel.js","components/AddColor.js","App.js","reportWebVitals.js","index.js"],"names":["StarRating","starsNum","rating","setRating","style","props","Star","selected","onClick","f","color","starsArray","i","push","padding","map","ColorPanel","dropColor","className","backgroundColor","AddColor","addColor","useRef","onSubmit","e","preventDefault","newColor","current","value","newRating","ref","type","placeholder","required","min","max","data","App","document","title","useState","colors","setColors","index","newColors","entry","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"yPAGe,SAASA,EAAT,GAMX,IALFC,EAKC,EALDA,SACAC,EAIC,EAJDA,OACAC,EAGC,EAHDA,UACAC,EAEC,EAFDA,MACAC,EACC,EADDA,MAEMC,EAAO,SAAC,GAAD,QAAGC,gBAAH,aAAqBC,eAArB,MAA+B,SAACC,GAAD,OAAOA,GAAtC,SACX,cAAC,IAAD,CAAgBC,MAAOH,EAAW,MAAQ,OAAQC,QAASA,KAEzDN,EAASD,IACXC,EAASD,GAGX,IADA,IAAIU,EAAa,GACRC,EAAI,EAAGA,EAAIV,EAAQU,IAC1BD,EAAWE,MAAK,GAElB,IAAK,IAAID,EAAIV,EAAQU,EAAIX,EAAUW,IACjCD,EAAWE,MAAK,GAElB,OACE,6CAAKT,MAAK,aAAIU,QAAS,OAAUV,IAAaC,GAA9C,aACGM,EAAWI,KAAI,SAACR,EAAUK,GAAX,OACd,cAACN,EAAD,CAAcC,SAAUA,EAAUC,QAAS,kBAAML,EAAUS,EAAI,KAApDA,SCtBJ,SAASI,EAAT,GAMX,IALFN,EAKC,EALDA,MACAR,EAIC,EAJDA,OACAD,EAGC,EAHDA,SACAgB,EAEC,EAFDA,UACAd,EACC,EADDA,UAEA,OACE,gCACE,iCACE,cAAC,IAAD,CAAiBe,UAAU,QAAQV,QAASS,MAE9C,qBAAKC,UAAU,aAAad,MAAO,CAAEe,gBAAiBT,KACtD,cAACV,EAAD,CAAYC,SAAUA,EAAUC,OAAQA,EAAQC,UAAWA,IAC3D,yBChBS,SAASiB,EAAT,GAA2C,IAAvBC,EAAsB,EAAtBA,SAAUpB,EAAY,EAAZA,SACvCS,EAAQY,iBAAO,MACfpB,EAASoB,iBAAO,MASpB,OACE,uBAAMC,SARO,SAACC,GACdA,EAAEC,iBACF,IAAMC,EAAWhB,EAAMiB,QAAQC,MACzBC,EAAY3B,EAAOyB,QAAQC,MACjCP,EAASK,EAAUG,IAInB,UACE,uBACEC,IAAKpB,EACLqB,KAAK,QACLb,UAAU,cACVc,YAAY,aACZC,UAAQ,IAEV,uBACEH,IAAK5B,EACLgB,UAAU,YACVa,KAAK,SACLG,IAAI,IACJC,IAAKlC,EACLgC,UAAQ,IAEV,wBAAQf,UAAU,iBAAlB,oBCzBN,IAAMkB,EAAO,CACX,CAAE1B,MAAO,OAAQR,OAAQ,GACzB,CAAEQ,MAAO,MAAOR,OAAQ,GACxB,CAAEQ,MAAO,QAASR,OAAQ,GAC1B,CAAEQ,MAAO,SAAUR,OAAQ,IAGd,SAASmC,IACtBC,SAASC,MAAQ,cACjB,MAA4BC,mBAASJ,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KAMMvC,EAAY,SAACwC,GAAD,OAAW,SAACzC,GAC5B,IAAI0C,EAAS,YAAOH,GACpBG,EAAUD,GAAV,2BAAwBC,EAAUD,IAAlC,IAA0CzC,OAAQA,IAClDwC,EAAUE,KAUZ,OACE,qCACGH,EAAO1B,KAAI,SAAC8B,EAAOjC,GAAR,OACV,cAACI,EAAD,CAEEC,WAvBW0B,EAuBU/B,EAvBA,WAC3B,IAAIgC,EAAS,YAAOH,GACpBG,EAAYH,EAAOK,QAAO,SAACD,EAAOjC,GAAR,OAAcA,IAAM+B,KAC9CD,EAAUE,KAqBJzC,UAAWA,EAAUS,GACrBF,MAAOmC,EAAMnC,MACbR,OAAQ2C,EAAM3C,OACdD,SAXS,GAMJW,GAtBK,IAAC+B,KA8Bf,cAACvB,EAAD,CAAUC,SApBG,SAACX,EAAOR,GACvB,IAAI0C,EAAS,YAAOH,GACpBG,EAAU/B,KAAK,CAAEH,MAAOA,EAAOR,OAAQA,IACvCwC,EAAUE,IAiBsB3C,SAdjB,OC/BnB,IAYe8C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASqB,eAAe,SAM1BZ,M","file":"static/js/main.7ffae65f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { BsFillStarFill } from \"react-icons/bs\";\r\n\r\nexport default function StarRating({\r\n  starsNum,\r\n  rating,\r\n  setRating,\r\n  style,\r\n  props,\r\n}) {\r\n  const Star = ({ selected = false, onClick = (f) => f }) => (\r\n    <BsFillStarFill color={selected ? \"red\" : \"grey\"} onClick={onClick} />\r\n  );\r\n  if (rating > starsNum) {\r\n    rating = starsNum;\r\n  }\r\n  let starsArray = [];\r\n  for (let i = 0; i < rating; i++) {\r\n    starsArray.push(true);\r\n  }\r\n  for (let i = rating; i < starsNum; i++) {\r\n    starsArray.push(false);\r\n  }\r\n  return (\r\n    <div style={{ padding: \"5px\", ...style }} {...props}>\r\n      {starsArray.map((selected, i) => (\r\n        <Star key={i} selected={selected} onClick={() => setRating(i + 1)} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { BsFillTrashFill } from \"react-icons/bs\";\r\nimport StarRating from \"./StarRating.js\";\r\n\r\nexport default function ColorPanel({\r\n  color,\r\n  rating,\r\n  starsNum,\r\n  dropColor,\r\n  setRating,\r\n}) {\r\n  return (\r\n    <div>\r\n      <button>\r\n        <BsFillTrashFill className=\"trash\" onClick={dropColor} />\r\n      </button>\r\n      <div className=\"colorBlock\" style={{ backgroundColor: color }}></div>\r\n      <StarRating starsNum={starsNum} rating={rating} setRating={setRating} />\r\n      <p></p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\n\r\nexport default function AddColor({ addColor, starsNum }) {\r\n  let color = useRef(null);\r\n  let rating = useRef(null);\r\n\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n    const newColor = color.current.value;\r\n    const newRating = rating.current.value;\r\n    addColor(newColor, newRating);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submit}>\r\n      <input\r\n        ref={color}\r\n        type=\"color\"\r\n        className=\"chooseColor\"\r\n        placeholder=\"your color\"\r\n        required\r\n      />\r\n      <input\r\n        ref={rating}\r\n        className=\"ratingBox\"\r\n        type=\"number\"\r\n        min=\"1\"\r\n        max={starsNum}\r\n        required\r\n      />\r\n      <button className=\"addColorButton\">ADD</button>\r\n    </form>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport ColorPanel from \"./components/ColorPanel.js\";\nimport AddColor from \"./components/AddColor.js\";\n\nconst data = [\n  { color: \"blue\", rating: 3 },\n  { color: \"red\", rating: 4 },\n  { color: \"green\", rating: 5 },\n  { color: \"purple\", rating: 2 },\n];\n\nexport default function App() {\n  document.title = \"star-rating\";\n  const [colors, setColors] = useState(data);\n  const dropColor = (index) => () => {\n    let newColors = [...colors];\n    newColors = colors.filter((entry, i) => i !== index);\n    setColors(newColors);\n  };\n  const setRating = (index) => (rating) => {\n    let newColors = [...colors];\n    newColors[index] = { ...newColors[index], rating: rating };\n    setColors(newColors);\n  };\n  const addColor = (color, rating) => {\n    let newColors = [...colors];\n    newColors.push({ color: color, rating: rating });\n    setColors(newColors);\n  };\n\n  const starsNum = 5;\n\n  return (\n    <>\n      {colors.map((entry, i) => (\n        <ColorPanel\n          key={i}\n          dropColor={dropColor(i)}\n          setRating={setRating(i)}\n          color={entry.color}\n          rating={entry.rating}\n          starsNum={starsNum}\n        />\n      ))}\n      <AddColor addColor={addColor} starsNum={starsNum} />\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}