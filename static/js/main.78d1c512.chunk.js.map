{"version":3,"sources":["components/StarRating.js","components/ColorPanel.js","App.js","reportWebVitals.js","index.js"],"names":["StarRating","starsNum","rating","setRating","Star","selected","onClick","f","color","starsArray","i","push","map","ColorPanel","dropColor","className","style","backgroundColor","data","App","document","title","useState","colors","setColors","index","newColors","console","log","entry","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"yPAGe,SAASA,EAAT,GAAsD,IAAhCC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UAC/CC,EAAO,SAAC,GAAD,QAAGC,gBAAH,aAAqBC,eAArB,MAA+B,SAACC,GAAD,OAAOA,GAAtC,SACX,cAAC,IAAD,CAAgBC,MAAOH,EAAW,MAAQ,OAAQC,QAASA,KAEzDJ,EAASD,IACXC,EAASD,GAGX,IADA,IAAIQ,EAAa,GACRC,EAAI,EAAGA,EAAIR,EAAQQ,IAC1BD,EAAWE,MAAK,GAElB,IAAK,IAAID,EAAIR,EAAQQ,EAAIT,EAAUS,IACjCD,EAAWE,MAAK,GAElB,OACE,mCACGF,EAAWG,KAAI,SAACP,EAAUK,GAAX,OACd,cAACN,EAAD,CAAcC,SAAUA,EAAUC,QAAS,kBAAMH,EAAUO,EAAI,KAApDA,QChBJ,SAASG,EAAT,GAMX,IALFL,EAKC,EALDA,MACAN,EAIC,EAJDA,OACAD,EAGC,EAHDA,SACAa,EAEC,EAFDA,UACAX,EACC,EADDA,UAEA,OACE,gCACE,iCACE,cAAC,IAAD,CAAiBY,UAAU,QAAQT,QAASQ,MAE9C,qBAAKC,UAAU,aAAaC,MAAO,CAAEC,gBAAiBT,KACtD,cAACR,EAAD,CAAYC,SAAUA,EAAUC,OAAQA,EAAQC,UAAWA,IAC3D,yBCdN,IAAMe,EAAO,CACX,CAAEV,MAAO,OAAQN,OAAQ,GACzB,CAAEM,MAAO,MAAON,OAAQ,GACxB,CAAEM,MAAO,QAASN,OAAQ,GAC1B,CAAEM,MAAO,SAAUN,OAAQ,IAGd,SAASiB,IACtBC,SAASC,MAAQ,cACjB,MAA4BC,mBAASJ,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KAMMrB,EAAY,SAACsB,GAAD,OAAW,SAACvB,GAC5B,IAAIwB,EAAS,YAAOH,GACpBG,EAAUD,GAAV,2BAAuBC,EAAUD,IAAjC,IAAyCvB,OAAQA,IACjDsB,EAAUE,GACVC,QAAQC,IAAIF,KAId,OACE,mCACGH,EAAOX,KAAI,SAACiB,EAAOnB,GAAR,OACV,cAACG,EAAD,CAEEC,WAlBWW,EAkBUf,EAlBA,WAC3B,IAAIgB,EAAS,YAAOH,GACpBG,EAAYH,EAAOO,QAAO,SAACD,EAAOnB,GAAR,OAAcA,IAAMe,KAC9CD,EAAUE,KAgBJvB,UAAWA,EAAUO,GACrBF,MAAOqB,EAAMrB,MACbN,OAAQ2B,EAAM3B,OACdD,SAXS,GAMJS,GAjBK,IAACe,OCdrB,IAYeM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASuB,eAAe,SAM1BZ,M","file":"static/js/main.78d1c512.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { BsFillStarFill } from \"react-icons/bs\";\r\n\r\nexport default function StarRating({ starsNum, rating, setRating }) {\r\n  const Star = ({ selected = false, onClick = (f) => f }) => (\r\n    <BsFillStarFill color={selected ? \"red\" : \"grey\"} onClick={onClick} />\r\n  );\r\n  if (rating > starsNum) {\r\n    rating = starsNum;\r\n  }\r\n  let starsArray = [];\r\n  for (let i = 0; i < rating; i++) {\r\n    starsArray.push(true);\r\n  }\r\n  for (let i = rating; i < starsNum; i++) {\r\n    starsArray.push(false);\r\n  }\r\n  return (\r\n    <>\r\n      {starsArray.map((selected, i) => (\r\n        <Star key={i} selected={selected} onClick={() => setRating(i + 1)} />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { BsFillTrashFill } from \"react-icons/bs\";\r\nimport StarRating from \"./StarRating.js\";\r\n\r\nexport default function ColorPanel({\r\n  color,\r\n  rating,\r\n  starsNum,\r\n  dropColor,\r\n  setRating,\r\n}) {\r\n  return (\r\n    <div>\r\n      <button>\r\n        <BsFillTrashFill className=\"trash\" onClick={dropColor} />\r\n      </button>\r\n      <div className=\"colorBlock\" style={{ backgroundColor: color }}></div>\r\n      <StarRating starsNum={starsNum} rating={rating} setRating={setRating} />\r\n      <p></p>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport ColorPanel from \"./components/ColorPanel.js\";\n\nconst data = [\n  { color: \"blue\", rating: 3 },\n  { color: \"red\", rating: 4 },\n  { color: \"green\", rating: 5 },\n  { color: \"purple\", rating: 2 },\n];\n\nexport default function App() {\n  document.title = 'star-rating'\n  const [colors, setColors] = useState(data);\n  const dropColor = (index) => ()=> {\n    let newColors = [...colors];\n    newColors = colors.filter((entry, i) => i !== index);\n    setColors(newColors);\n  };\n  const setRating = (index) => (rating) => {\n    let newColors = [...colors];\n    newColors[index] = {...newColors[index], rating: rating}\n    setColors(newColors);\n    console.log(newColors);\n  };\n  const starsNum = 5;\n\n  return (\n    <>\n      {colors.map((entry, i) => (\n        <ColorPanel\n          key={i}\n          dropColor={dropColor(i)}\n          setRating={setRating(i)}\n          color={entry.color}\n          rating={entry.rating}\n          starsNum={starsNum}\n        />\n      ))}\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}