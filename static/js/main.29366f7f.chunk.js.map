{"version":3,"sources":["components/StarRating.js","components/ColorPanel.js","components/useRealmApp.js","components/ColorProvider.js","components/AddColor.js","App.js","reportWebVitals.js","index.js"],"names":["StarRating","starsNum","rating","setRating","style","props","Star","selected","onClick","f","color","starsArray","i","push","padding","map","ColorPanel","dropColor","className","backgroundColor","COLLECTION","DB","useRealmApp","app","Realm","id","a","credentials","anonymous","logIn","user","currentUser","realmService","mongoClient","db","collection","console","log","login","colorsData","ColorContext","createContext","useColors","useContext","ColorProvider","children","useState","colors","setColors","find","WrapColorQuery","Provider","value","addColor","insertOne","newColors","insertWrapper","err","filter","entry","_id","deleteOne","query","newValue","$set","updateOne","res","AddColor","useInput","initialValue","setValue","onChange","e","target","colorProps","resetColor","ratingProps","resetRating","onSubmit","preventDefault","type","required","min","max","App","document","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.29366f7f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { BsFillStarFill } from \"react-icons/bs\";\r\n\r\nexport default function StarRating({ starsNum, rating, setRating, style, props }) {\r\n  const Star = ({ selected = false, onClick = (f) => f }) => (\r\n    <BsFillStarFill color={selected ? \"red\" : \"grey\"} onClick={onClick} />\r\n  );\r\n  if (rating > starsNum) {\r\n    rating = starsNum;\r\n  }\r\n  let starsArray = [];\r\n  for (let i = 0; i < rating; i++) {\r\n    starsArray.push(true);\r\n  }\r\n  for (let i = rating; i < starsNum; i++) {\r\n    starsArray.push(false);\r\n  }\r\n  return (\r\n    <div style={{ padding: \"5px\", ...style }} {...props}>\r\n      {starsArray.map((selected, i) => (\r\n        <Star key={i} selected={selected} onClick={() => setRating(i + 1)} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { BsFillTrashFill } from \"react-icons/bs\";\r\nimport StarRating from \"./StarRating.js\";\r\n\r\nexport default function ColorPanel({ color, rating, starsNum, dropColor, setRating }) {\r\n  return (\r\n    <div>\r\n      <button>\r\n        <BsFillTrashFill className=\"trash\" onClick={dropColor} />\r\n      </button>\r\n      <div className=\"colorBlock\" style={{ backgroundColor: color }}></div>\r\n      <StarRating starsNum={starsNum} rating={rating} setRating={setRating}/>\r\n      <p></p>\r\n    </div>\r\n  );\r\n}\r\n","import * as Realm from \"realm-web\";\r\n\r\nconst REALM_APP_ID = \"test-bnbuo\";\r\nconst COLLECTION = \"colors\";\r\nconst DB = \"test\";\r\n\r\nexport default function useRealmApp() {\r\n  const app = new Realm.App({ id: REALM_APP_ID });\r\n  async function login() {\r\n    const credentials = Realm.Credentials.anonymous();\r\n    try {\r\n      await app.logIn(credentials);\r\n      const user = app.currentUser;\r\n      const realmService = user.mongoClient(\"mongodb-atlas\");\r\n      const db = realmService.db(DB);\r\n      const collection = db.collection(COLLECTION);\r\n      return collection;\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n  return login();\r\n}\r\n","import React, { createContext, useState, useContext } from \"react\";\r\nimport useRealmApp from \"./useRealmApp\";\r\n\r\nlet collection,\r\n  colorsData = null;\r\n\r\nconst ColorContext = createContext();\r\nexport const useColors = () => useContext(ColorContext);\r\n\r\nexport default function ColorProvider({ children }) {\r\n  console.log(\"ColorProvider runs\");\r\n  const [colors, setColors] = useState([]);\r\n\r\n  async function WrapColorQuery() {\r\n    console.log(\"loging in to MongoDB\");\r\n    collection = await useRealmApp();\r\n    colorsData = await collection.find();\r\n    setColors(colorsData);\r\n  }\r\n  if (!collection && !colorsData) {\r\n    WrapColorQuery();\r\n  }\r\n\r\n  const dropColor = (id) => () => {\r\n    let newColors = [...colors];\r\n    newColors = colors.filter((entry) => entry._id !== id);\r\n    setColors(newColors);\r\n    try {\r\n      collection.deleteOne({ _id: id });\r\n    } catch (err) {\r\n      if (err) throw err;\r\n    }\r\n  };\r\n\r\n  const setRating = (id) => (rating) => {\r\n    let newColors = colors.map((entry) =>\r\n      entry._id === id ? { ...entry, rating: rating } : entry\r\n    );\r\n    setColors(newColors);\r\n    const query = { _id: id };\r\n    const newValue = { $set: { rating: rating } };\r\n    collection.updateOne(query, newValue, (err, res) => {\r\n      if (err) throw err;\r\n      console.log(res);\r\n    });\r\n  };\r\n\r\n  const addColor = (color, rating) => {\r\n    async function insertWrapper() {\r\n      await collection.insertOne({ color: color, rating: rating });\r\n      const newColors = await collection.find();\r\n      setColors(newColors);\r\n    }\r\n    try {\r\n      insertWrapper();\r\n    } catch (err) {\r\n      if (err) throw err;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ColorContext.Provider value={{ colors, addColor, dropColor, setRating }}>\r\n      {children}\r\n    </ColorContext.Provider>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useColors } from \"./ColorProvider.js\";\r\n\r\nexport default function AddColor({ starsNum }) {\r\n  const useInput = (initialValue) => {\r\n    const [value, setValue] = useState(initialValue);\r\n    return [\r\n      { value, onChange: (e) => setValue(e.target.value) },\r\n      () => setValue(initialValue),\r\n    ];\r\n  };\r\n\r\n  const [colorProps, resetColor] = useInput(\"#A3A3A3\");\r\n  const [ratingProps, resetRating] = useInput(3);\r\n  const { addColor } = useColors();\r\n\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n    addColor(colorProps.value, ratingProps.value);\r\n    resetColor();\r\n    resetRating();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submit}>\r\n      <input type=\"color\" className=\"chooseColor\" {...colorProps} required />\r\n      <input\r\n        className=\"ratingBox\"\r\n        type=\"number\"\r\n        min=\"1\"\r\n        max={starsNum}\r\n        {...ratingProps}\r\n        required\r\n      />\r\n      <button className=\"addColorButton\">ADD</button>\r\n    </form>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport ColorPanel from \"./components/ColorPanel.js\";\nimport AddColor from \"./components/AddColor.js\";\nimport { useColors } from \"./components/ColorProvider.js\";\n\nconst starsNum = 5;\ndocument.title = \"star-rating\";\n\nexport default function App() {\n  const { colors, dropColor, setRating } = useColors();\n  return (\n    <>\n      {colors.map((entry) => (\n        <ColorPanel\n          key={entry._id}\n          color={entry.color}\n          rating={entry.rating}\n          starsNum={starsNum}\n          dropColor={dropColor(entry._id)}\n          setRating={setRating(entry._id)}\n        />\n      ))}\n      <AddColor starsNum={starsNum} />\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport ColorProvider from \"./components/ColorProvider.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorProvider>\n      <App />\n    </ColorProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}