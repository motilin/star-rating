{"version":3,"sources":["components/StarRating.js","components/ColorPanel.js","components/AddColor.js","components/useRealmApp.js","App.js","reportWebVitals.js","index.js"],"names":["StarRating","starsNum","rating","setRating","style","props","Star","selected","onClick","f","color","starsArray","i","push","padding","map","ColorPanel","dropColor","className","backgroundColor","AddColor","addColor","useState","setColor","onSubmit","e","preventDefault","type","value","onChange","event","target","required","min","max","DB","useRealmApp","app","Realm","id","a","credentials","anonymous","logIn","user","currentUser","realmService","mongoClient","db","console","log","login","col","App","document","title","colors","setColors","newColors","filter","entry","_id","deleteOne","err","query","newValue","$set","updateOne","res","useEffect","collection","find","WrapColorQuery","insertOne","insertWrapper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kjBAGe,SAASA,EAAT,GAMX,IALFC,EAKC,EALDA,SACAC,EAIC,EAJDA,OACAC,EAGC,EAHDA,UACAC,EAEC,EAFDA,MACAC,EACC,EADDA,MAEMC,EAAO,SAAC,GAAD,QAAGC,gBAAH,aAAqBC,eAArB,MAA+B,SAACC,GAAD,OAAOA,GAAtC,SACX,cAAC,IAAD,CAAgBC,MAAOH,EAAW,MAAQ,OAAQC,QAASA,KAEzDN,EAASD,IACXC,EAASD,GAGX,IADA,IAAIU,EAAa,GACRC,EAAI,EAAGA,EAAIV,EAAQU,IAC1BD,EAAWE,MAAK,GAElB,IAAK,IAAID,EAAIV,EAAQU,EAAIX,EAAUW,IACjCD,EAAWE,MAAK,GAElB,OACE,6CAAKT,MAAK,aAAIU,QAAS,OAAUV,IAAaC,GAA9C,aACGM,EAAWI,KAAI,SAACR,EAAUK,GAAX,OACd,cAACN,EAAD,CAAcC,SAAUA,EAAUC,QAAS,kBAAML,EAAUS,EAAI,KAApDA,SCtBJ,SAASI,EAAT,GAMX,IALFN,EAKC,EALDA,MACAR,EAIC,EAJDA,OACAD,EAGC,EAHDA,SACAgB,EAEC,EAFDA,UACAd,EACC,EADDA,UAEA,OACE,gCACE,iCACE,cAAC,IAAD,CAAiBe,UAAU,QAAQV,QAASS,MAE9C,qBAAKC,UAAU,aAAad,MAAO,CAAEe,gBAAiBT,KACtD,cAACV,EAAD,CAAYC,SAAUA,EAAUC,OAAQA,EAAQC,UAAWA,IAC3D,yBChBS,SAASiB,EAAT,GAA2C,IAAvBC,EAAsB,EAAtBA,SAAUpB,EAAY,EAAZA,SAC3C,EAA0BqB,mBAAS,WAAnC,mBAAOZ,EAAP,KAAca,EAAd,KACA,EAA4BD,mBAAS,GAArC,mBAAOpB,EAAP,KAAeC,EAAf,KASA,OACE,uBAAMqB,SARO,SAACC,GACdA,EAAEC,iBACFL,EAASX,EAAOR,GAChBqB,EAAS,WACTpB,EAAU,IAIV,UACE,uBACEwB,KAAK,QACLT,UAAU,cACVU,MAAOlB,EACPmB,SAAU,SAACC,GAAD,OAAWP,EAASO,EAAMC,OAAOH,QAC3CI,UAAQ,IAEV,uBACEd,UAAU,YACVS,KAAK,SACLM,IAAI,IACJC,IAAKjC,EACL2B,MAAO1B,EACP2B,SAAU,SAACC,GAAD,OAAW3B,EAAU2B,EAAMC,OAAOH,QAC5CI,UAAQ,IAEV,wBAAQd,UAAU,iBAAlB,oB,YC5BAiB,EAAK,OAEI,SAASC,IACtB,IAAMC,EAAM,IAAIC,IAAU,CAAEC,GAJT,eAGiB,4CAEpC,kCAAAC,EAAA,6DACQC,EAAcH,IAAkBI,YADxC,kBAGUL,EAAIM,MAAMF,GAHpB,cAIUG,EAAOP,EAAIQ,YACXC,EAAeF,EAAKG,YAAY,iBAChCC,EAAKF,EAAaE,GAAGb,GAN/B,kBAOWa,GAPX,kCASIC,QAAQC,IAAR,MATJ,2DAFoC,sBAcpC,OAdoC,0CAc7BC,GCbT,IAAIC,EAAM,KASK,SAASC,IACtBC,SAASC,MAAQ,cACjB,MAA4BjC,mBAAS,IAArC,mBAAOkC,EAAP,KAAeC,EAAf,KAEMxC,EAAY,SAACsB,GAAD,OAAQ,WACxB,IAAImB,EAAS,YAAOF,GACpBE,EAAYF,EAAOG,QAAO,SAACC,GAAD,OAAWA,EAAMC,MAAQtB,KACnDkB,EAAUC,GACV,IACEN,EAAIU,UAAU,CAAED,IAAKtB,IACrB,MAAOwB,GACP,GAAIA,EAAK,MAAMA,KAGb5D,EAAY,SAACoC,GAAD,OAAQ,SAACrC,GACzB,IAAIwD,EAAYF,EAAOzC,KAAI,SAAC6C,GAAD,OACzBA,EAAMC,MAAQtB,EAAd,2BAAwBqB,GAAxB,IAA+B1D,OAAQA,IAAW0D,KAEpDH,EAAUC,GACV,IAAMM,EAAQ,CAAEH,IAAKtB,GACf0B,EAAW,CAAEC,KAAM,CAAEhE,OAAQA,IACnCkD,EAAIe,UAAUH,EAAOC,GAAU,SAACF,EAAKK,GACnC,GAAIL,EAAK,MAAMA,EACfd,QAAQC,IAAIkB,QA4BhB,OAZAC,qBAAU,WAAM,4CACd,8BAAA7B,EAAA,sEACmBJ,IADnB,YACQY,EADR,+BAGII,EAAMJ,EAAGsB,WAAW,UAHxB,SAIyBlB,EAAImB,OAJ7B,OAIUf,EAJV,OAKIC,EAAUD,GALd,4CADc,uBAAC,WAAD,wBASdgB,KACC,IAGD,qCACGhB,EAAOzC,KAAI,SAAC6C,GACX,IAAMrB,EAAKqB,EAAMC,IACjB,OACE,cAAC7C,EAAD,CAEEC,UAAWA,EAAUsB,GACrBpC,UAAWA,EAAUoC,GACrB7B,MAAOkD,EAAMlD,MACbR,OAAQ0D,EAAM1D,OACdD,SAtEK,GAiEAsC,MASX,cAACnB,EAAD,CAAUC,SAxCG,SAACX,EAAOR,GAAW,4CAClC,4BAAAsC,EAAA,sEACQY,EAAIqB,UAAU,CAAE/D,MAAOA,EAAOR,OAAQA,IAD9C,uBAE0BkD,EAAImB,OAF9B,OAEQb,EAFR,OAGED,EAAUC,GAHZ,4CADkC,sBAMlC,KANmC,WAAD,wBAOhCgB,GACA,MAAOX,GACP,GAAIA,EAAK,MAAMA,IA+Be9D,SA1EnB,OCPjB,IAYe0E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhC,SAASiC,eAAe,SAM1BZ,M","file":"static/js/main.2161bcf7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { BsFillStarFill } from \"react-icons/bs\";\r\n\r\nexport default function StarRating({\r\n  starsNum,\r\n  rating,\r\n  setRating,\r\n  style,\r\n  props,\r\n}) {\r\n  const Star = ({ selected = false, onClick = (f) => f }) => (\r\n    <BsFillStarFill color={selected ? \"red\" : \"grey\"} onClick={onClick} />\r\n  );\r\n  if (rating > starsNum) {\r\n    rating = starsNum;\r\n  }\r\n  let starsArray = [];\r\n  for (let i = 0; i < rating; i++) {\r\n    starsArray.push(true);\r\n  }\r\n  for (let i = rating; i < starsNum; i++) {\r\n    starsArray.push(false);\r\n  }\r\n  return (\r\n    <div style={{ padding: \"5px\", ...style }} {...props}>\r\n      {starsArray.map((selected, i) => (\r\n        <Star key={i} selected={selected} onClick={() => setRating(i + 1)} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { BsFillTrashFill } from \"react-icons/bs\";\r\nimport StarRating from \"./StarRating.js\";\r\n\r\nexport default function ColorPanel({\r\n  color,\r\n  rating,\r\n  starsNum,\r\n  dropColor,\r\n  setRating,\r\n}) {\r\n  return (\r\n    <div>\r\n      <button>\r\n        <BsFillTrashFill className=\"trash\" onClick={dropColor} />\r\n      </button>\r\n      <div className=\"colorBlock\" style={{ backgroundColor: color }}></div>\r\n      <StarRating starsNum={starsNum} rating={rating} setRating={setRating} />\r\n      <p></p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function AddColor({ addColor, starsNum }) {\r\n  const [color, setColor] = useState(\"#A3A3A3\");\r\n  const [rating, setRating] = useState(3);\r\n\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n    addColor(color, rating);\r\n    setColor(\"#A3A3A3\");\r\n    setRating(3);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submit}>\r\n      <input\r\n        type=\"color\"\r\n        className=\"chooseColor\"\r\n        value={color}\r\n        onChange={(event) => setColor(event.target.value)}\r\n        required\r\n      />\r\n      <input\r\n        className=\"ratingBox\"\r\n        type=\"number\"\r\n        min=\"1\"\r\n        max={starsNum}\r\n        value={rating}\r\n        onChange={(event) => setRating(event.target.value)}\r\n        required\r\n      />\r\n      <button className=\"addColorButton\">ADD</button>\r\n    </form>\r\n  );\r\n}\r\n","import * as Realm from \"realm-web\";\r\n\r\nconst REALM_APP_ID = \"test-bnbuo\";\r\nconst DB = \"test\";\r\n\r\nexport default function useRealmApp() {\r\n  const app = new Realm.App({ id: REALM_APP_ID });\r\n  async function login() {\r\n    const credentials = Realm.Credentials.anonymous();\r\n    try {\r\n      await app.logIn(credentials);\r\n      const user = app.currentUser;\r\n      const realmService = user.mongoClient(\"mongodb-atlas\");\r\n      const db = realmService.db(DB);\r\n      return db;\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n  return login();\r\n}\r\n","import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport ColorPanel from \"./components/ColorPanel.js\";\nimport AddColor from \"./components/AddColor.js\";\nimport useRealmApp from \"./components/useRealmApp.js\";\n\nlet col = null;\nconst starsNum = 5;\n// const data = [\n//   { color: \"blue\", rating: 3 },\n//   { color: \"red\", rating: 4 },\n//   { color: \"green\", rating: 5 },\n//   { color: \"purple\", rating: 2 },\n// ];\n\nexport default function App() {\n  document.title = \"star-rating\";\n  const [colors, setColors] = useState([]);\n\n  const dropColor = (id) => () => {\n    let newColors = [...colors];\n    newColors = colors.filter((entry) => entry._id !== id);\n    setColors(newColors);\n    try {\n      col.deleteOne({ _id: id });\n    } catch (err) {\n      if (err) throw err;\n    }\n  };\n  const setRating = (id) => (rating) => {\n    let newColors = colors.map((entry) =>\n      entry._id === id ? { ...entry, rating: rating } : entry\n    );\n    setColors(newColors);\n    const query = { _id: id };\n    const newValue = { $set: { rating: rating } };\n    col.updateOne(query, newValue, (err, res) => {\n      if (err) throw err;\n      console.log(res);\n    });\n  };\n  const addColor = (color, rating) => {\n    async function insertWrapper() {\n      await col.insertOne({ color: color, rating: rating });\n      const newColors = await col.find();\n      setColors(newColors);\n    }\n    try {\n      insertWrapper();\n    } catch (err) {\n      if (err) throw err;\n    }\n  };\n\n  useEffect(() => {\n    async function WrapColorQuery() {\n      const db = await useRealmApp();\n      if (db) {\n        col = db.collection(\"colors\");\n        const colors = await col.find();\n        setColors(colors);\n      }\n    }\n    WrapColorQuery();\n  }, []);\n\n  return (\n    <>\n      {colors.map((entry) => {\n        const id = entry._id;\n        return (\n          <ColorPanel\n            key={id}\n            dropColor={dropColor(id)}\n            setRating={setRating(id)}\n            color={entry.color}\n            rating={entry.rating}\n            starsNum={starsNum}\n          />\n        );\n      })}\n      <AddColor addColor={addColor} starsNum={starsNum} />\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}